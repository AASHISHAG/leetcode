1. Two pointers (https://github.com/AASHISHAG/leetcode/blob/main/string/reverse-words-in-a-given-string.py)
2. Maintain lists (At the start of the problem initialize a list of constant size. With each input, change the value of the element to TRUE.) Ex: https://github.com/AASHISHAG/leetcode/blob/main/string/larget-alphabetic-character.py
3. Maintain dicts (The key in the dict represents something you are searching for. The value represents the result.)
4. Recursion
5. To search the item, we should use set(). It has O(1) avg. search complexity, instead of lists. However, to add items in the set() the complexity is O(n). Source: https://www.youtube.com/watch?v=rfvc66Qog4o
6. Heapq: maintains the minimum element on top of the queue (https://www.pythoncontent.com/heapq-in-python/) O(n): time complexity to heapify the list.
